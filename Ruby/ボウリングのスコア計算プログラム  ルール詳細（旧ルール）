# ボウリングのスコア計算プログラム  ルール詳細（旧ルール）
# 基本的には一般的なボウリングのルールをベースにします。新ルール（カレントフレームシステム）ではなく、旧ルールで計算します。
#   1ゲーム=10フレーム。
#   1フレーム=2投。（例外あり）
#   ピンの数は10本。
#   1投目で10本倒したらストライク。
#   ストライクの場合は2投目は表記しない。
#   1投目で全て倒せなかった時、2投目で全て倒したらスペア。
#   スペアのフレームの得点は次の1投の点を加算する。
#   例: 6 4 5 = 15
#   例: 6 4 10 = 20
#   ストライクのフレームの得点は次の2投の点を加算する。
#   例: 10 5 2 = 17
#   例: 10 10 10 = 30
#   10フレーム目は1投目がストライクもしくは2投目がスペアだった場合、3投目が投げられる。
#   ありえない投球数やありえない数字・記号がこない前提。

# Xのときは[10]にする
# frames = [[10, 0], [10, 0], [5, 0]]
# frames.each do |ar|
#   if ar == [10, 0]
#     ar.delete(0)
#   end
# end
# p frames # => [[10], [10], [5, 0]]

# 試したこと
# 9フレーム以降を合算した数を求める

# 9, 10フレーム抜き取って考える
# ar = [7, 3], [10]
# if ar[0].sum == 10
#   p (ar[0].concat ar[1]).sum
# end

# ①
# ar = [[6, 3], [9, 0], [0, 3], [8, 2], [7, 3], [10], [9, 1], [8, 0], [10], [6, 4], [5]]
# if ar[9].sum == 10
#   p (ar[9].concat ar[10]).sum  # => 15
# end

# ②
# ar = [[6, 3], [9, 0], [0, 3], [8, 2], [7, 3], [10], [9, 1], [8, 0], [10], [10], [10], [10]]
# if ar[9] == [10]
#   p (ar[9].concat ar[10], ar[11]).sum  # => 30
# end

# ③
# ar = [[0, 10], [1, 5], [0, 0], [0, 0], [10], [10], [10], [5, 1], [8, 1], [0, 4]]
# if ar[9].sum < 10
#   p ar[9].sum  # => 4
# end

# ①②③まとめ
# ar = [[0, 10], [1, 5], [0, 0], [0, 0], [10], [10], [10], [5, 1], [8, 1], [0, 4]]
# if ar[9] == [10]
#   p (ar[9].concat ar[10], ar[11]).sum
# elsif ar[9].sum == 10
#   p (ar[9].concat ar[10]).sum
# else ar[9].sum < 10
#   p ar[9].sum
# end

# [[0, 10], [1, 5], [0, 0], [0, 0], [10], [10], [10], [5, 1], [8, 1], [0, 4]]
# [[6, 3], [9, 0], [0, 3], [8, 2], [7, 3], [10], [9, 1], [8, 0], [10], [6, 4], [5]]
# [[6, 3], [9, 0], [0, 3], [8, 2], [7, 3], [10], [9, 1], [8, 0], [10], [10], [10], [10]]


# ar = [6, 4]
# p ar == [10] # => false
# p ar.sum == [10] # => false
# p ar.sum == 10 # => true

# ストライクとスペアのとき、追加される点数のみについて考えてみる
# ストライクのとき 配列3パターン
[[10], [1, 5]]
[[10], [10], [1, 5]]
[[10], [10], [10]]


# p [10] == [10] # => true
# p [6,4] == [10] # => false

# ar = [[10], [1, 5]]
# if ar[0] == [10]
#   p ar[1].sum  # => 6
# end

# ar = [[10], [10], [1, 5]]
# p ar[2].class  # => Array
# p ar[2][0].class  # => Integer
# p ar[1][0].class  # => Integer

# if ar[0] == [10]
#   p (ar[1][0] + ar[2][0])  # => 11
# end

# ar = [[10], [10], [10]]
# if ar[0].sum == 10
#   p (ar[1][0] + ar[2][0])  # => 20
# end

# 上の3つのまとめ
# ar = [[10], [1, 5]]
# if ar[0] == [10]
#   if ar[1] == [10]
#     p (ar[1][0] + ar[2][0])
#   else
#     p ar[1].sum
#   end
# end
  


# スペアのときは2通り同じ条件で取り出せる
# [[0, 10], [1, 5]]
# [[0, 10], [10]]

# ar = [[0, 10], [1, 5]]
# if ar[0].sum == 10
#   p ar[1][0]  # => 1
# end

# ar = [[0, 10], [10]]
# if ar[0].sum == 10
#   p (ar[1][0])  # => 10
# end




# % ./bowling.rb 6,3,9,0,0,3,8,2,7,3,X,9,1,8,0,X,6,4,5
# 139
# [6,3],[9,0],[0,3],[8,2],[7,3],[X],[9,1],[8,0],[X],[6,4,5]
# [[6, 3], [9, 0], [0, 3], [8, 2], [7, 3], [10], [9, 1], [8, 0], [10], [6, 4], [5]]

# % ./bowling.rb 6,3,9,0,0,3,8,2,7,3,X,9,1,8,0,X,X,X,X
# 164
# [6,3],[9,0],[0,3],[8,2],[7,3],[X],[9,1],[8,0],[X],[X,X,X]

# % ./bowling.rb 0,10,1,5,0,0,0,0,X,X,X,5,1,8,1,0,4
# 107
# [0,10],[1,5],[0,0],[0,0],[X],[X],[X],[5,1],[8,1],[0,4]
# [[0, 10], [1, 5], [0, 0], [0, 0], [10], [10], [10], [5, 1], [8, 1], [0, 4]]

# % ./bowling.rb 6,3,9,0,0,3,8,2,7,3,X,9,1,8,0,X,X,0,0
# 134
# [6,3],[9,0],[0,3],[8,2],[7,3],[X],[9,1],[8,0],[X],[X,0,0]

# % ./bowling.rb 6,3,9,0,0,3,8,2,7,3,X,9,1,8,0,X,X,1,8
# 144
# [6,3],[9,0],[0,3],[8,2],[7,3],[X],[9,1],[8,0],[X],[X,1,8]

# % ./bowling.rb X,X,X,X,X,X,X,X,X,X,X,X 
# 300
# [X],[X],[X],[X],[X],[X],[X],[X],[X],[X,X,X]
